import { FilePlugin } from "./file.plugin";
import { relative } from "path";
import { StringPlugin } from "./string.plugin";


/**
 * Srishti Plugin for auto registering routes
 * This plugin registers all routes in a given folder
 * This operation happens only once when a server starts
 * If you dont like using this plugin you have to 
 * manually import all routes and index them in Srishti Server.ts
 */
var fs = require("fs");
var path = require("path");
var sugar = require("sugar");
var Handlebars = require("handlebars");
var os = process.platform;



/**
 * If you are using Srishti , you need
 * not change this path
 */
var route_dir = "../routes";

var manager_template: string = "/** This file holds references to our Apis. It is always auto generated, so please do not edit. Editing will have no impact */"


ConfigureRoutes();


/**
 * When this configurator is first invoked
 * we will read the given directory and recognize
 * all possible API files. API files must end with
 * .api pre extension. A correct API file would be
 * called as module.api.ts
 */
function ConfigureRoutes() {
    console.log("Reading Directory For Routes");
    var array = [];
    var normalizedPath = path.join(__dirname, route_dir);


    /**
     * The Routes folder can have any number of subdirectories
     * We give the developer the flexibility of arranging his
     * routes without enforcing a strict structure. So in this
     * case we walk the subdirectories in search the DOT API
     * file
     */

    let files = FilePlugin.ReadSubDirectories(normalizedPath);
    let index = 0;
    files.forEach(function (file) {
        index++;

        // check if the files are annoted as api
        if (file != null && file.indexOf("api") >= 0) {
            let relativePath = FilePlugin.ProvideRelativePath(file, normalizedPath);
            // os plotform checking
            if (os === "win32") {
                relativePath = relativePath.substring(1);
                relativePath = relativePath.replace(/\\/g, "/")
                let filePathArray = StringPlugin.splitAt(relativePath, relativePath.lastIndexOf("/"));
                let dirPath = filePathArray[0];
                let apiFile = filePathArray[1];
                let model_name = apiFile.split(".")[0];
                let x: any = {};
                x.relativePath = dirPath;
                x.api = model_name + ".api";
                x.route = sugar.String.capitalize(model_name) + "Routes";
                array.push(x);
            }
            else {
                let filePathArray = StringPlugin.splitAt(relativePath, relativePath.lastIndexOf("/"));
                let dirPath = filePathArray[0];
                let apiFile = filePathArray[1];
                let model_name = apiFile.split(".")[0];
                let x: any = {};
                x.relativePath = dirPath;
                x.api = model_name + ".api";
                x.route = sugar.String.capitalize(model_name) + "Routes";
                array.push(x);
            }
        }
    });

    GenerateRouteManager(array);

}


/**
 * This will create the route manager
 * that would host all our composite routes
 * @param array 
 */
function GenerateRouteManager(array) {
    try {
        let source = ConstructHandleBarTemplate();
        let template = Handlebars.compile(source);
        let result = template({ routes: array });
        let destination = path.join(__dirname, "../managers/", "route.manager.ts");
        fs.writeFileSync(destination, result, function (err, data) {
            if (err) { return console.log(err); }
            console.log("Route Manager Created Successfully");
        });
    }
    catch (error) {
        console.log("Error :" + error);
    }
}


/**
 * This generates a handlebar template
 * Which will create our route manager
 * and store this in manager folder
 */
function ConstructHandleBarTemplate() {
    manager_template = "/** THIS FILE IS AUTOGENERATED BY ROUTE CONFIG PLUGIN";
    manager_template += "\nEDIITNG IS NOT RECCOMMENDED AND EVEN IF YOU EDIT NOTHING HAPPENS.\nTHE NEXT BUILD WOULD OVERWRITE IT */"
    manager_template += "\n";
    manager_template += "\n";
    manager_template += "{{#each routes}}"
    manager_template += "\n";
    manager_template += "import { {{route}} as Route{{@index}} } from '@routes/{{relativePath}}/{{api}}'";
    manager_template += "\n";
    manager_template += "{{/each}}";
    manager_template += "\n\n";
    manager_template += "export class RouteManager";
    manager_template += "\n";
    manager_template += "{\n";
    manager_template += "  public static CreateRouter(router){";
    manager_template += "\n\n";
    manager_template += "{{#each routes}}"
    manager_template += "\n";
    manager_template += "      Route{{@index}}.create(router);";
    manager_template += "\n";
    manager_template += "{{/each}}";
    manager_template += "\n\n";
    manager_template += "} \n }";
    return manager_template;
}
