

import { Schema, ObjectId } from "mongoose";

/**
 * This is generated by Srishti Module Plugin
 * Srishti divides the model into two parts
 * The interface driven definition is consumed
 * everywhere in the application to give it a TYPE flavor
 * the schema however is the structure that is stored in Mongo
 * We link the interface with the schema
 */
export class {{data.interface}}
{
     id?:string;
    {{#if data.property1}} {{data.property1}}?:any; {{/if}}
    {{#if data.property2}} {{data.property2}}?:any; {{/if}}
    {{#if data.property3}} {{data.property3}}?:any; {{/if}}
    {{#if data.property4}} {{data.property4}}?:any; {{/if}}
    {{#if data.property5}} {{data.property5}}?:any; {{/if}}
    schemaName = "{{data.routerName}}"; // this would be the name of your collection in mongoose
    schema = schemaDefinition; //dont change this
}




/**
 * This Mongoose schema is a very powerful tool
 * It imparts a structure to unstructured data
 * A lot of integrity and sanity check can and need to be performed here
 * We default everything to string. But feel free to change them
 * the schema however is the structure that is stored in Mongo
 * We link the interface with the schema
 */
export var schemaDefinition: Schema = new Schema(
{
          id: ObjectId,
         {{#if data.property1}} {{data.property1}}:{type: String, default: "" , select:true , unique:true },  {{/if}}
         {{#if data.property2}} {{data.property2}}:{type: String, default: "" , select:true , unique:false }, {{/if}}
         {{#if data.property3}} {{data.property3}}:{type: String, default: "" , select:true , unique:false }, {{/if}}
         {{#if data.property4}} {{data.property4}}:{type: String, default: "" , select:true , unique:false }, {{/if}}
         {{#if data.property5}}  {{data.property5}}:{type: String, default: "" , select:true , unique:false }, {{/if}}
});